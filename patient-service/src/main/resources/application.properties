spring.application.name=patient-service

# UNCOMMENT TO USE IN MEMORY DATABASE OUTSIDE OF DOCKER
spring.h2.console.path=/h2-console
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver

spring.datasource.username=admin_viewer
spring.datasource.password=password

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.hibernate.ddl-auto=update
spring.sql.init.mode=always

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
spring.kafka.bootstrap-servers=localhost:9092

server.port=4000
logging.level.root=info

# === GRPC Configuration (use different port for local development) ===
grpc.server.port=9091

# === AWS and Auth0 Configuration ===

# Disable AWS for local development
aws.enabled=false

# AWS region for the SQS client. Defaults to us-east-1 if not specified.
aws.region=us-east-1

# The URL of the SQS queue to which a message will be published when a
# patient is created. This queue should be configured in AWS and set up to
# trigger a Lambda function that sends a welcome email. Replace the value
# below with your actual queue URL.
aws.sqs.queue-url=https://sqs.us-east-1.amazonaws.com/123456789012/patient-created-queue

# The issuer URI for Auth0. Replace with your Auth0 tenant domain.
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://your-auth0-domain/

# The audience (API identifier) configured in Auth0. Replace with your
# configured audience. This value is used by the AudienceValidator to
# validate the "aud" claim in incoming JWTs. If you do not need audience
# validation, you can omit this property.
spring.security.oauth2.resourceserver.jwt.audience=your-api-audience
