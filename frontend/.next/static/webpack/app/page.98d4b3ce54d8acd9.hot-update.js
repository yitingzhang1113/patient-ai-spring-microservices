"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/lib/api-service.ts":
/*!********************************!*\
  !*** ./app/lib/api-service.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiService: function() { return /* binding */ ApiService; },\n/* harmony export */   RecommendationType: function() { return /* binding */ RecommendationType; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nconst API_BASE_URL = \"http://localhost:8090\" || 0;\nconsole.log(\"API Base URL:\", API_BASE_URL) // Debug log\n;\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    timeout: 10000\n});\n// Request interceptor for auth tokens (when implemented)\napiClient.interceptors.request.use((config)=>{\n    // Add auth token here when authentication is implemented\n    // const token = localStorage.getItem('token')\n    // if (token) {\n    //   config.headers.Authorization = `Bearer ${token}`\n    // }\n    return config;\n}, (error)=>Promise.reject(error));\n// Response interceptor for error handling\napiClient.interceptors.response.use((response)=>response, (error)=>{\n    var _error_response;\n    console.error(\"API Error:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n    return Promise.reject(error);\n});\nvar RecommendationType;\n(function(RecommendationType) {\n    RecommendationType[\"CLINICAL_NOTE_SUMMARY\"] = \"CLINICAL_NOTE_SUMMARY\";\n    RecommendationType[\"TRIAGE_ASSESSMENT\"] = \"TRIAGE_ASSESSMENT\";\n    RecommendationType[\"CODING_SUGGESTION\"] = \"CODING_SUGGESTION\";\n    RecommendationType[\"HEALTH_RECOMMENDATION\"] = \"HEALTH_RECOMMENDATION\";\n    RecommendationType[\"RISK_ASSESSMENT\"] = \"RISK_ASSESSMENT\";\n})(RecommendationType || (RecommendationType = {}));\nclass ApiService {\n    // AI Recommendations API\n    static async getRecommendationsByPatient(patientId) {\n        const response = await apiClient.get(\"/api/ai-recommendations/patient/\".concat(patientId));\n        return response.data;\n    }\n    static async getRecommendationsByPatientAndType(patientId, type) {\n        const response = await apiClient.get(\"/api/ai-recommendations/patient/\".concat(patientId, \"/type/\").concat(type));\n        return response.data;\n    }\n    static async getRecentRecommendationsByPatient(patientId) {\n        let days = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 7;\n        const response = await apiClient.get(\"/api/ai-recommendations/patient/\".concat(patientId, \"/recent?days=\").concat(days));\n        return response.data;\n    }\n    static async getRecommendationSummary(patientId) {\n        const response = await apiClient.get(\"/api/ai-recommendations/patient/\".concat(patientId, \"/summary\"));\n        return response.data;\n    }\n    static async getRecommendationById(recommendationId) {\n        const response = await apiClient.get(\"/api/ai-recommendations/\".concat(recommendationId));\n        return response.data;\n    }\n    // Patient API (when implemented)\n    static async getPatients() {\n        try {\n            const response = await apiClient.get(\"/api/patients\");\n            return response.data;\n        } catch (error) {\n            console.warn(\"Patient API not available, returning mock data\");\n            return [\n                {\n                    id: \"1\",\n                    firstName: \"John\",\n                    lastName: \"Doe\",\n                    email: \"john.doe@email.com\",\n                    phone: \"+1-555-0123\",\n                    dateOfBirth: \"1985-06-15\",\n                    address: \"123 Main St, City, State 12345\",\n                    emergencyContact: \"Jane Doe - +1-555-0124\",\n                    medicalHistory: [\n                        \"Hypertension\",\n                        \"Type 2 Diabetes\"\n                    ],\n                    allergies: [\n                        \"Penicillin\",\n                        \"Nuts\"\n                    ],\n                    medications: [\n                        \"Metformin 500mg\",\n                        \"Lisinopril 10mg\"\n                    ]\n                },\n                {\n                    id: \"2\",\n                    firstName: \"Jane\",\n                    lastName: \"Smith\",\n                    email: \"jane.smith@email.com\",\n                    phone: \"+1-555-0125\",\n                    dateOfBirth: \"1990-03-22\",\n                    address: \"456 Oak Ave, City, State 12345\",\n                    emergencyContact: \"Bob Smith - +1-555-0126\",\n                    medicalHistory: [\n                        \"Asthma\"\n                    ],\n                    allergies: [\n                        \"Shellfish\"\n                    ],\n                    medications: [\n                        \"Albuterol inhaler\"\n                    ]\n                }\n            ];\n        }\n    }\n    static async getPatientById(patientId) {\n        try {\n            const response = await apiClient.get(\"/api/patients/\".concat(patientId));\n            return response.data;\n        } catch (error) {\n            console.warn(\"Patient API not available, returning mock data\");\n            const patients = await this.getPatients();\n            return patients.find((p)=>p.id === patientId) || null;\n        }\n    }\n    // Health check API\n    static async healthCheck() {\n        try {\n            const response = await apiClient.get(\"/actuator/health\");\n            return response.data;\n        } catch (error) {\n            return {\n                status: \"DOWN\",\n                services: {}\n            };\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9saWIvYXBpLXNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlCO0FBRXpCLE1BQU1DLGVBQWVDLHVCQUF1QyxJQUFJO0FBRWhFRyxRQUFRQyxHQUFHLENBQUMsaUJBQWlCTCxjQUFjLFlBQVk7O0FBRXZELE1BQU1NLFlBQVlQLDZDQUFLQSxDQUFDUSxNQUFNLENBQUM7SUFDN0JDLFNBQVNSO0lBQ1RTLFNBQVM7UUFDUCxnQkFBZ0I7SUFDbEI7SUFDQUMsU0FBUztBQUNYO0FBRUEseURBQXlEO0FBQ3pESixVQUFVSyxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUNoQyxDQUFDQztJQUNDLHlEQUF5RDtJQUN6RCw4Q0FBOEM7SUFDOUMsZUFBZTtJQUNmLHFEQUFxRDtJQUNyRCxJQUFJO0lBQ0osT0FBT0E7QUFDVCxHQUNBLENBQUNDLFFBQVVDLFFBQVFDLE1BQU0sQ0FBQ0Y7QUFHNUIsMENBQTBDO0FBQzFDVCxVQUFVSyxZQUFZLENBQUNPLFFBQVEsQ0FBQ0wsR0FBRyxDQUNqQyxDQUFDSyxXQUFhQSxVQUNkLENBQUNIO1FBQzZCQTtJQUE1QlgsUUFBUVcsS0FBSyxDQUFDLGNBQWNBLEVBQUFBLGtCQUFBQSxNQUFNRyxRQUFRLGNBQWRILHNDQUFBQSxnQkFBZ0JJLElBQUksS0FBSUosTUFBTUssT0FBTztJQUNqRSxPQUFPSixRQUFRQyxNQUFNLENBQUNGO0FBQ3hCOztVQTRCVU07Ozs7OztHQUFBQSx1QkFBQUE7QUE2QkwsTUFBTUM7SUFDWCx5QkFBeUI7SUFDekIsYUFBYUMsNEJBQTRCQyxTQUFpQixFQUErQjtRQUN2RixNQUFNTixXQUFXLE1BQU1aLFVBQVVtQixHQUFHLENBQUMsbUNBQTZDLE9BQVZEO1FBQ3hFLE9BQU9OLFNBQVNDLElBQUk7SUFDdEI7SUFFQSxhQUFhTyxtQ0FDWEYsU0FBaUIsRUFDakJHLElBQXdCLEVBQ0s7UUFDN0IsTUFBTVQsV0FBVyxNQUFNWixVQUFVbUIsR0FBRyxDQUFDLG1DQUFxREUsT0FBbEJILFdBQVUsVUFBYSxPQUFMRztRQUMxRixPQUFPVCxTQUFTQyxJQUFJO0lBQ3RCO0lBRUEsYUFBYVMsa0NBQ1hKLFNBQWlCLEVBRVk7WUFEN0JLLE9BQUFBLGlFQUFlO1FBRWYsTUFBTVgsV0FBVyxNQUFNWixVQUFVbUIsR0FBRyxDQUFDLG1DQUE0REksT0FBekJMLFdBQVUsaUJBQW9CLE9BQUxLO1FBQ2pHLE9BQU9YLFNBQVNDLElBQUk7SUFDdEI7SUFFQSxhQUFhVyx5QkFBeUJOLFNBQWlCLEVBQWtDO1FBQ3ZGLE1BQU1OLFdBQVcsTUFBTVosVUFBVW1CLEdBQUcsQ0FBQyxtQ0FBNkMsT0FBVkQsV0FBVTtRQUNsRixPQUFPTixTQUFTQyxJQUFJO0lBQ3RCO0lBRUEsYUFBYVksc0JBQXNCQyxnQkFBd0IsRUFBNkI7UUFDdEYsTUFBTWQsV0FBVyxNQUFNWixVQUFVbUIsR0FBRyxDQUFDLDJCQUE0QyxPQUFqQk87UUFDaEUsT0FBT2QsU0FBU0MsSUFBSTtJQUN0QjtJQUVBLGlDQUFpQztJQUNqQyxhQUFhYyxjQUFrQztRQUM3QyxJQUFJO1lBQ0YsTUFBTWYsV0FBVyxNQUFNWixVQUFVbUIsR0FBRyxDQUFDO1lBQ3JDLE9BQU9QLFNBQVNDLElBQUk7UUFDdEIsRUFBRSxPQUFPSixPQUFPO1lBQ2RYLFFBQVE4QixJQUFJLENBQUM7WUFDYixPQUFPO2dCQUNMO29CQUNFQyxJQUFJO29CQUNKQyxXQUFXO29CQUNYQyxVQUFVO29CQUNWQyxPQUFPO29CQUNQQyxPQUFPO29CQUNQQyxhQUFhO29CQUNiQyxTQUFTO29CQUNUQyxrQkFBa0I7b0JBQ2xCQyxnQkFBZ0I7d0JBQUM7d0JBQWdCO3FCQUFrQjtvQkFDbkRDLFdBQVc7d0JBQUM7d0JBQWM7cUJBQU87b0JBQ2pDQyxhQUFhO3dCQUFDO3dCQUFtQjtxQkFBa0I7Z0JBQ3JEO2dCQUNBO29CQUNFVixJQUFJO29CQUNKQyxXQUFXO29CQUNYQyxVQUFVO29CQUNWQyxPQUFPO29CQUNQQyxPQUFPO29CQUNQQyxhQUFhO29CQUNiQyxTQUFTO29CQUNUQyxrQkFBa0I7b0JBQ2xCQyxnQkFBZ0I7d0JBQUM7cUJBQVM7b0JBQzFCQyxXQUFXO3dCQUFDO3FCQUFZO29CQUN4QkMsYUFBYTt3QkFBQztxQkFBb0I7Z0JBQ3BDO2FBQ0Q7UUFDSDtJQUNGO0lBRUEsYUFBYUMsZUFBZXRCLFNBQWlCLEVBQTJCO1FBQ3RFLElBQUk7WUFDRixNQUFNTixXQUFXLE1BQU1aLFVBQVVtQixHQUFHLENBQUMsaUJBQTJCLE9BQVZEO1lBQ3RELE9BQU9OLFNBQVNDLElBQUk7UUFDdEIsRUFBRSxPQUFPSixPQUFPO1lBQ2RYLFFBQVE4QixJQUFJLENBQUM7WUFDYixNQUFNYSxXQUFXLE1BQU0sSUFBSSxDQUFDZCxXQUFXO1lBQ3ZDLE9BQU9jLFNBQVNDLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRWQsRUFBRSxLQUFLWCxjQUFjO1FBQ25EO0lBQ0Y7SUFFQSxtQkFBbUI7SUFDbkIsYUFBYTBCLGNBQTBEO1FBQ3JFLElBQUk7WUFDRixNQUFNaEMsV0FBVyxNQUFNWixVQUFVbUIsR0FBRyxDQUFDO1lBQ3JDLE9BQU9QLFNBQVNDLElBQUk7UUFDdEIsRUFBRSxPQUFPSixPQUFPO1lBQ2QsT0FBTztnQkFBRW9DLFFBQVE7Z0JBQVFDLFVBQVUsQ0FBQztZQUFFO1FBQ3hDO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvbGliL2FwaS1zZXJ2aWNlLnRzPzYyYzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuXG5jb25zdCBBUElfQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfR0FURVdBWV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA5MCdcblxuY29uc29sZS5sb2coJ0FQSSBCYXNlIFVSTDonLCBBUElfQkFTRV9VUkwpIC8vIERlYnVnIGxvZ1xuXG5jb25zdCBhcGlDbGllbnQgPSBheGlvcy5jcmVhdGUoe1xuICBiYXNlVVJMOiBBUElfQkFTRV9VUkwsXG4gIGhlYWRlcnM6IHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICB9LFxuICB0aW1lb3V0OiAxMDAwMCwgLy8gMTAgc2Vjb25kIHRpbWVvdXRcbn0pXG5cbi8vIFJlcXVlc3QgaW50ZXJjZXB0b3IgZm9yIGF1dGggdG9rZW5zICh3aGVuIGltcGxlbWVudGVkKVxuYXBpQ2xpZW50LmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShcbiAgKGNvbmZpZykgPT4ge1xuICAgIC8vIEFkZCBhdXRoIHRva2VuIGhlcmUgd2hlbiBhdXRoZW50aWNhdGlvbiBpcyBpbXBsZW1lbnRlZFxuICAgIC8vIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJylcbiAgICAvLyBpZiAodG9rZW4pIHtcbiAgICAvLyAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSBgQmVhcmVyICR7dG9rZW59YFxuICAgIC8vIH1cbiAgICByZXR1cm4gY29uZmlnXG4gIH0sXG4gIChlcnJvcikgPT4gUHJvbWlzZS5yZWplY3QoZXJyb3IpXG4pXG5cbi8vIFJlc3BvbnNlIGludGVyY2VwdG9yIGZvciBlcnJvciBoYW5kbGluZ1xuYXBpQ2xpZW50LmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoXG4gIChyZXNwb25zZSkgPT4gcmVzcG9uc2UsXG4gIChlcnJvcikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FQSSBFcnJvcjonLCBlcnJvci5yZXNwb25zZT8uZGF0YSB8fCBlcnJvci5tZXNzYWdlKVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcilcbiAgfVxuKVxuXG5leHBvcnQgaW50ZXJmYWNlIEFJUmVjb21tZW5kYXRpb24ge1xuICBpZDogc3RyaW5nXG4gIHBhdGllbnRJZDogc3RyaW5nXG4gIHNvdXJjZVR5cGU6IHN0cmluZ1xuICBzb3VyY2VJZDogc3RyaW5nXG4gIHR5cGU6IFJlY29tbWVuZGF0aW9uVHlwZVxuICB0aXRsZTogc3RyaW5nXG4gIHN1bW1hcnk6IHN0cmluZ1xuICByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdXG4gIHNhZmV0eU5vdGVzOiBzdHJpbmdbXVxuICBwcmlvcml0eTogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdjcml0aWNhbCdcbiAgYW5hbHlzaXM6IEFJQW5hbHlzaXNcbiAgY3JlYXRlZEF0OiBzdHJpbmdcbiAgdXBkYXRlZEF0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBSUFuYWx5c2lzIHtcbiAgY2xpbmljYWxTdW1tYXJ5OiBzdHJpbmdcbiAgc3VnZ2VzdGVkRGlhZ25vc2lzQ29kZXM6IHN0cmluZ1tdXG4gIHN1Z2dlc3RlZFByb2NlZHVyZUNvZGVzOiBzdHJpbmdbXVxuICB0cmlhZ2VQcmlvcml0eTogc3RyaW5nXG4gIHJlY29tbWVuZGVkQ2FyZUxldmVsOiBzdHJpbmdcbiAgY29uZmlkZW5jZVNjb3JlOiBudW1iZXJcbn1cblxuZXhwb3J0IGVudW0gUmVjb21tZW5kYXRpb25UeXBlIHtcbiAgQ0xJTklDQUxfTk9URV9TVU1NQVJZID0gJ0NMSU5JQ0FMX05PVEVfU1VNTUFSWScsXG4gIFRSSUFHRV9BU1NFU1NNRU5UID0gJ1RSSUFHRV9BU1NFU1NNRU5UJyxcbiAgQ09ESU5HX1NVR0dFU1RJT04gPSAnQ09ESU5HX1NVR0dFU1RJT04nLFxuICBIRUFMVEhfUkVDT01NRU5EQVRJT04gPSAnSEVBTFRIX1JFQ09NTUVOREFUSU9OJyxcbiAgUklTS19BU1NFU1NNRU5UID0gJ1JJU0tfQVNTRVNTTUVOVCdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXRpZW50IHtcbiAgaWQ6IHN0cmluZ1xuICBmaXJzdE5hbWU6IHN0cmluZ1xuICBsYXN0TmFtZTogc3RyaW5nXG4gIGVtYWlsOiBzdHJpbmdcbiAgcGhvbmU6IHN0cmluZ1xuICBkYXRlT2ZCaXJ0aDogc3RyaW5nXG4gIGFkZHJlc3M6IHN0cmluZ1xuICBlbWVyZ2VuY3lDb250YWN0OiBzdHJpbmdcbiAgbWVkaWNhbEhpc3Rvcnk6IHN0cmluZ1tdXG4gIGFsbGVyZ2llczogc3RyaW5nW11cbiAgbWVkaWNhdGlvbnM6IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb21tZW5kYXRpb25TdW1tYXJ5IHtcbiAgcmVjZW50Q291bnQ6IG51bWJlclxuICBtb250aGx5Q291bnQ6IG51bWJlclxuICBoaWdoUHJpb3JpdHlDb3VudDogbnVtYmVyXG4gIGNyaXRpY2FsQ291bnQ6IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgQXBpU2VydmljZSB7XG4gIC8vIEFJIFJlY29tbWVuZGF0aW9ucyBBUElcbiAgc3RhdGljIGFzeW5jIGdldFJlY29tbWVuZGF0aW9uc0J5UGF0aWVudChwYXRpZW50SWQ6IHN0cmluZyk6IFByb21pc2U8QUlSZWNvbW1lbmRhdGlvbltdPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlDbGllbnQuZ2V0KGAvYXBpL2FpLXJlY29tbWVuZGF0aW9ucy9wYXRpZW50LyR7cGF0aWVudElkfWApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRSZWNvbW1lbmRhdGlvbnNCeVBhdGllbnRBbmRUeXBlKFxuICAgIHBhdGllbnRJZDogc3RyaW5nLCBcbiAgICB0eXBlOiBSZWNvbW1lbmRhdGlvblR5cGVcbiAgKTogUHJvbWlzZTxBSVJlY29tbWVuZGF0aW9uW10+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5nZXQoYC9hcGkvYWktcmVjb21tZW5kYXRpb25zL3BhdGllbnQvJHtwYXRpZW50SWR9L3R5cGUvJHt0eXBlfWApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRSZWNlbnRSZWNvbW1lbmRhdGlvbnNCeVBhdGllbnQoXG4gICAgcGF0aWVudElkOiBzdHJpbmcsIFxuICAgIGRheXM6IG51bWJlciA9IDdcbiAgKTogUHJvbWlzZTxBSVJlY29tbWVuZGF0aW9uW10+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5nZXQoYC9hcGkvYWktcmVjb21tZW5kYXRpb25zL3BhdGllbnQvJHtwYXRpZW50SWR9L3JlY2VudD9kYXlzPSR7ZGF5c31gKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZ2V0UmVjb21tZW5kYXRpb25TdW1tYXJ5KHBhdGllbnRJZDogc3RyaW5nKTogUHJvbWlzZTxSZWNvbW1lbmRhdGlvblN1bW1hcnk+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5nZXQoYC9hcGkvYWktcmVjb21tZW5kYXRpb25zL3BhdGllbnQvJHtwYXRpZW50SWR9L3N1bW1hcnlgKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZ2V0UmVjb21tZW5kYXRpb25CeUlkKHJlY29tbWVuZGF0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8QUlSZWNvbW1lbmRhdGlvbj4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LmdldChgL2FwaS9haS1yZWNvbW1lbmRhdGlvbnMvJHtyZWNvbW1lbmRhdGlvbklkfWApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbiAgfVxuXG4gIC8vIFBhdGllbnQgQVBJICh3aGVuIGltcGxlbWVudGVkKVxuICBzdGF0aWMgYXN5bmMgZ2V0UGF0aWVudHMoKTogUHJvbWlzZTxQYXRpZW50W10+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlDbGllbnQuZ2V0KCcvYXBpL3BhdGllbnRzJylcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignUGF0aWVudCBBUEkgbm90IGF2YWlsYWJsZSwgcmV0dXJuaW5nIG1vY2sgZGF0YScpXG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICcxJyxcbiAgICAgICAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgICAgZW1haWw6ICdqb2huLmRvZUBlbWFpbC5jb20nLFxuICAgICAgICAgIHBob25lOiAnKzEtNTU1LTAxMjMnLFxuICAgICAgICAgIGRhdGVPZkJpcnRoOiAnMTk4NS0wNi0xNScsXG4gICAgICAgICAgYWRkcmVzczogJzEyMyBNYWluIFN0LCBDaXR5LCBTdGF0ZSAxMjM0NScsXG4gICAgICAgICAgZW1lcmdlbmN5Q29udGFjdDogJ0phbmUgRG9lIC0gKzEtNTU1LTAxMjQnLFxuICAgICAgICAgIG1lZGljYWxIaXN0b3J5OiBbJ0h5cGVydGVuc2lvbicsICdUeXBlIDIgRGlhYmV0ZXMnXSxcbiAgICAgICAgICBhbGxlcmdpZXM6IFsnUGVuaWNpbGxpbicsICdOdXRzJ10sXG4gICAgICAgICAgbWVkaWNhdGlvbnM6IFsnTWV0Zm9ybWluIDUwMG1nJywgJ0xpc2lub3ByaWwgMTBtZyddXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJzInLFxuICAgICAgICAgIGZpcnN0TmFtZTogJ0phbmUnLFxuICAgICAgICAgIGxhc3ROYW1lOiAnU21pdGgnLFxuICAgICAgICAgIGVtYWlsOiAnamFuZS5zbWl0aEBlbWFpbC5jb20nLFxuICAgICAgICAgIHBob25lOiAnKzEtNTU1LTAxMjUnLFxuICAgICAgICAgIGRhdGVPZkJpcnRoOiAnMTk5MC0wMy0yMicsXG4gICAgICAgICAgYWRkcmVzczogJzQ1NiBPYWsgQXZlLCBDaXR5LCBTdGF0ZSAxMjM0NScsXG4gICAgICAgICAgZW1lcmdlbmN5Q29udGFjdDogJ0JvYiBTbWl0aCAtICsxLTU1NS0wMTI2JyxcbiAgICAgICAgICBtZWRpY2FsSGlzdG9yeTogWydBc3RobWEnXSxcbiAgICAgICAgICBhbGxlcmdpZXM6IFsnU2hlbGxmaXNoJ10sXG4gICAgICAgICAgbWVkaWNhdGlvbnM6IFsnQWxidXRlcm9sIGluaGFsZXInXVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldFBhdGllbnRCeUlkKHBhdGllbnRJZDogc3RyaW5nKTogUHJvbWlzZTxQYXRpZW50IHwgbnVsbD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5nZXQoYC9hcGkvcGF0aWVudHMvJHtwYXRpZW50SWR9YClcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignUGF0aWVudCBBUEkgbm90IGF2YWlsYWJsZSwgcmV0dXJuaW5nIG1vY2sgZGF0YScpXG4gICAgICBjb25zdCBwYXRpZW50cyA9IGF3YWl0IHRoaXMuZ2V0UGF0aWVudHMoKVxuICAgICAgcmV0dXJuIHBhdGllbnRzLmZpbmQocCA9PiBwLmlkID09PSBwYXRpZW50SWQpIHx8IG51bGxcbiAgICB9XG4gIH1cblxuICAvLyBIZWFsdGggY2hlY2sgQVBJXG4gIHN0YXRpYyBhc3luYyBoZWFsdGhDaGVjaygpOiBQcm9taXNlPHsgc3RhdHVzOiBzdHJpbmc7IHNlcnZpY2VzOiBhbnkgfT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5nZXQoJy9hY3R1YXRvci9oZWFsdGgnKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiAnRE9XTicsIHNlcnZpY2VzOiB7fSB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJBUElfQkFTRV9VUkwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfQVBJX0dBVEVXQVlfVVJMIiwiY29uc29sZSIsImxvZyIsImFwaUNsaWVudCIsImNyZWF0ZSIsImJhc2VVUkwiLCJoZWFkZXJzIiwidGltZW91dCIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJ1c2UiLCJjb25maWciLCJlcnJvciIsIlByb21pc2UiLCJyZWplY3QiLCJyZXNwb25zZSIsImRhdGEiLCJtZXNzYWdlIiwiUmVjb21tZW5kYXRpb25UeXBlIiwiQXBpU2VydmljZSIsImdldFJlY29tbWVuZGF0aW9uc0J5UGF0aWVudCIsInBhdGllbnRJZCIsImdldCIsImdldFJlY29tbWVuZGF0aW9uc0J5UGF0aWVudEFuZFR5cGUiLCJ0eXBlIiwiZ2V0UmVjZW50UmVjb21tZW5kYXRpb25zQnlQYXRpZW50IiwiZGF5cyIsImdldFJlY29tbWVuZGF0aW9uU3VtbWFyeSIsImdldFJlY29tbWVuZGF0aW9uQnlJZCIsInJlY29tbWVuZGF0aW9uSWQiLCJnZXRQYXRpZW50cyIsIndhcm4iLCJpZCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiZW1haWwiLCJwaG9uZSIsImRhdGVPZkJpcnRoIiwiYWRkcmVzcyIsImVtZXJnZW5jeUNvbnRhY3QiLCJtZWRpY2FsSGlzdG9yeSIsImFsbGVyZ2llcyIsIm1lZGljYXRpb25zIiwiZ2V0UGF0aWVudEJ5SWQiLCJwYXRpZW50cyIsImZpbmQiLCJwIiwiaGVhbHRoQ2hlY2siLCJzdGF0dXMiLCJzZXJ2aWNlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/api-service.ts\n"));

/***/ })

});